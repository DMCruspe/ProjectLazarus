'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../utils');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _events = require('events');

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _database = require('../database');

var _database2 = _interopRequireDefault(_database);

var _schema = require('./schema');

var Schema = _interopRequireWildcard(_schema);

var _ops = require('./ops');

var Ops = _interopRequireWildcard(_ops);

var _indexes = require('./indexes');

var Indexes = _interopRequireWildcard(_indexes);

var _joins = require('./joins');

var Joins = _interopRequireWildcard(_joins);

function Model(name) {
  var options = arguments[1] === undefined ? {} : arguments[1];

  _lodash2['default'].defaults(options, {
    // Use the default database if none was passed
    database: _index2['default'].database,
    documentEndpoint: '/' + name + '/:id'
  });

  if (!options.database || !(options.database instanceof _database2['default'])) {
    throw new Error('Model requires a database');
  }

  // We actually want to return a constructor function
  // So let's set it up and have it extend `Document`
  var constructor = function constructor(document) {
    var shouldValidate = arguments[1] === undefined ? true : arguments[1];

    // If not using `new` syntax, force `new`
    if (!(this instanceof constructor)) {
      return new constructor(document);
    }

    // Extend using the document
    _lodash2['default'].extend(this, document || {});

    if (shouldValidate) {
      this.clean();
      this.check();
    }
  };

  // Force the right prototype onto constructor
  Object.setPrototypeOf(constructor, Model.prototype);

  // Super constructor call
  _events.EventEmitter.apply(constructor);
  (0, _utils.whenReady)(constructor);

  // Define the uneditable name and database values
  Object.defineProperty(constructor, '_name', { value: name });
  Object.defineProperty(constructor, '_database', { value: options.database });

  constructor._database.on('ready', function () {

    Object.defineProperty(constructor, '_collection', {
      value: constructor._database._connection.collection(constructor._name)
    });
    constructor.emit('ready', constructor._collection);
  });

  var bind = function bind(method, context, args) {
    return constructor[method].apply(constructor, [context].concat(_lodash2['default'].toArray(args)));
  };

  constructor.getUrl = function (id) {
    return id ? _index2['default'].serverUrl + options.documentEndpoint.replace(':id', id) : undefined;
  };

  constructor.prototype = Object.create({
    clean: function clean() {
      return bind('clean', this, arguments);
    },
    check: function check() {
      return bind('check', this, arguments);
    },
    validate: function validate() {
      return bind('validate', this, arguments);
    },
    linkify: function linkify() {
      return bind('linkify', this, arguments);
    },
    getUrl: function getUrl() {
      return constructor.getUrl(this._id);
    },
    save: function save(callback) {
      var _this = this;

      var document = _lodash2['default'].clone(this);
      callback = callback || _assert2['default'].ifError;

      constructor.save(document, function (error, id) {

        _this._id = id;
        callback(error, id);
      });
    }
  });

  // Overrides `this` when using `new` syntax
  return constructor;
}

// Establish the correct prototype chain
// Function > EventEmitter > Model
Model.prototype = (function () {

  // Becuse we reset the return object prototype (which is a function), we should have it extend a function
  var prototype = Object.create(Function.prototype);

  // `instanceof EventEmitter` won't work using this method, oh well
  _lodash2['default'].extend(prototype, _events.EventEmitter.prototype);

  prototype = Object.create(prototype);
  _lodash2['default'].extend(prototype, Schema, Ops, Indexes, Joins);

  return prototype;
})();

exports['default'] = Model;
module.exports = exports['default'];