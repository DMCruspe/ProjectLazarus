'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.find = find;
exports.findOne = findOne;
exports.valueExists = valueExists;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _mongodb = require('mongodb');

var _jsonPointer = require('json-pointer');

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _utils = require('../../utils');

var internals = {};

internals.formatArgs = function (args) {

  if (!this._collection) {
    throw new Error('Wait for a MongoDB connection to be established before finding documents');
  }

  args = _lodash2['default'].toArray(args);
  var callback = (0, _utils.getCallback)(args);
  var selector = args.shift() || {};
  var options = args.shift() || {};

  if (selector._id && !(selector._id instanceof _mongodb.ObjectId)) {
    try {
      selector._id = new _mongodb.ObjectId(selector._id);
    } catch (error) {}
  }

  _lodash2['default'].defaults(options, { projection: {} });

  if (_lodash2['default'].isArray(options)) {
    options = { include: options };
  }

  if (_lodash2['default'].isArray(options.include)) {
    options.include.forEach(function (property) {
      return options.projection[property] = 1;
    });
  }
  if (_lodash2['default'].isArray(options.exclude)) {
    options.exclude.forEach(function (property) {
      return options.projection[property] = 0;
    });
  }

  // Allow for prettier sort definitions
  if (options.sort) {
    options.sort = _lodash2['default'].mapValues(options.sort, function (value) {

      if (value === 'asc' || value === 'ascending') {
        return 1;
      }
      if (value === 'desc' || value === 'descending') {
        return -1;
      }
      return value;
    });
  }

  return { selector: selector, options: options, callback: callback };
};

function find() {
  var _this = this;

  var _internals$formatArgs$call = internals.formatArgs.call(this, arguments);

  var selector = _internals$formatArgs$call.selector;
  var options = _internals$formatArgs$call.options;
  var callback = _internals$formatArgs$call.callback;

  var cursor = this._collection.find(selector, options.projection);

  if (options.sort) {
    cursor.sort(options.sort);
  }
  if (options.skip) {
    cursor.skip(options.skip);
  }
  if (options.limit) {
    cursor.limit(options.limit);
  }

  cursor.map(function (document) {
    return new _this(document, false);
  });

  if (!callback) {
    return cursor;
  }
  cursor.toArray(function (error, documents) {

    callback(error, documents);
    cursor.close();
  });
}

function findOne() {
  var _this2 = this;

  var _internals$formatArgs$call2 = internals.formatArgs.call(this, arguments);

  var selector = _internals$formatArgs$call2.selector;
  var options = _internals$formatArgs$call2.options;
  var callback = _internals$formatArgs$call2.callback;

  callback = callback || _assert2['default'].ifError;

  this._collection.findOne(selector, options.projection, function (error, document) {
    return callback(error, document ? new _this2(document, false) : undefined);
  });
}

function valueExists(pointer, value, callback) {

  var selector = {};
  _jsonPointer2['default'].set(selector, pointer, value);
  this.findOne(selector, { include: ['_id'] }, function (error, document) {

    if (error) {
      return callback(error);
    }
    callback(null, document ? true : false);
  });
}

/* Silence */