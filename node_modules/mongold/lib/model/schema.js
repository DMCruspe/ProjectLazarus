'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.validate = validate;
exports.check = check;
exports.clean = clean;
exports.attachSchema = attachSchema;
exports.detachSchema = detachSchema;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _isMyJsonValid = require('is-my-json-valid');

var _isMyJsonValid2 = _interopRequireDefault(_isMyJsonValid);

var internals = {};

internals.updateState = function () {

  if (!this._schema) {
    this._schema = {};
  }
};

internals.recompileValidators = function (reset) {

  if (reset) {
    delete this._schema.validate;
    delete this._schema.validateGreedily;
    delete this._schema.filter;
    return;
  }

  this._schema.validate = (0, _isMyJsonValid2['default'])(this._schema.object, { verbose: true });
  this._schema.validateGreedily = (0, _isMyJsonValid2['default'])(this._schema.object, { verbose: true, greedy: true });
  this._schema.filter = _isMyJsonValid2['default'].filter(this._schema.object, { additionalProperties: false });
};

function validate(document) {
  var options = arguments[1] === undefined ? {} : arguments[1];

  internals.updateState.call(this);

  _lodash2['default'].defaults(options, { greedy: true });

  var validateSingle = this._schema.validate;
  var validateGreedily = this._schema.validateGreedily;

  var errors = (function () {

    if (options.greedy) {
      if (!validateGreedily) {
        return [];
      }

      validateGreedily(document);
      return validateGreedily.errors ? validateGreedily.errors : [];
    } else {
      if (!validateSingle) {
        return [];
      }

      validateSingle(document);
      return validateSingle.errors ? validateSingle.errors : [];
    }
  })();

  if (options.greedy) {
    return errors;
  } else {
    return errors[0];
  }
}

function check(document) {

  var error = this.validate(document, { greedy: false });

  if (error) {
    var throwError = new Error('Document failed validation at field \'' + error.field + '\'');
    throwError.field = error.field;
    throw throwError;
  }
}

function clean(document) {

  internals.updateState.call(this);

  if (this._schema.filter) {
    return this._schema.filter(document);
  }

  return document;
}

function attachSchema(attachment) {

  internals.updateState.call(this);

  if (!this._schema.object) {
    this._schema.object = {
      'type': 'object',
      'properties': { '_id': {} }
    };
  }

  // Merge the schemas, if we are merging arrays concatenate them and make sure values are unique
  _lodash2['default'].merge(this._schema.object, attachment, function (a, b) {
    return _lodash2['default'].isArray(a) ? _lodash2['default'].unique(a.concat(b)) : undefined;
  });
  internals.recompileValidators.call(this);
}

function detachSchema() {

  internals.updateState.call(this);
  delete this._schema.object;
  internals.recompileValidators.call(this, true);
}